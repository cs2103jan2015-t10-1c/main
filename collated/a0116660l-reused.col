//@author: a0116660l-reused



	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\FastAddEXE\Source.cpp
	 */

int main(){
	HWND hWnd=GetConsoleWindow();
    MoveWindow(hWnd,400,50,500,700,TRUE); //set a fixed position and size for the command prompt window
	Main RunFA;
	RunFA.readPath();
	RunFA.welcomeMessage();
	RunFA.readPath();
	RunFA.loadScheduledEntries();
	RunFA.loadFloatingEntries();
	RunFA.operateFastAdd();
	system("pause");
	return 0;
}
	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\FastAddEXE\Source.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp
	 */

//This segment is to make the search case-insensitive
inline bool caseInsCharCompSingle(char a, char b) {
   return(toupper(a) == b);
}

string::const_iterator caseInsFind(string& s, const string& p) {
   string tmp;

   transform(p.begin(), p.end(),            
             back_inserter(tmp),                 
             toupper);

   return(search(s.begin(), s.end(),         
                 tmp.begin(), tmp.end(),     
                 caseInsCharCompSingle));        
}

//Inititialise the SearchEntries object which takes in two vectors containing
//Scheduled List and Floating List
	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp
	 */

void SearchEntries::searchName(string inputName){
	initialiseSearchPagingAttributes();
		//initialise search results
		for (unsigned int i = 0; i < _scheduledList.size(); i++) {
			bool nameFound = false;
			_scheduledList[i].insertEntryNumber(i+1);
			string entryName = _scheduledList[i].getName();
			string::const_iterator it = caseInsFind(entryName, inputName);
			if (it != entryName.end()) {
				nameFound = true;
			}

			if (nameFound) {
				_scheduledSearchResult.push_back(_scheduledList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY));
		cout << "Scheduled Entries containing " << inputName << " in their name:" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		
		if (_scheduledSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadScheduledSearchResult();
		}

		//floating search
		for (unsigned int i = 0; i < _floatingList.size(); i++) {
			bool nameFound = false;
			_floatingList[i].insertEntryNumber(i+1);
			string entryName = _floatingList[i].getName();
			string::const_iterator it = caseInsFind(entryName, inputName);
			if (it != entryName.end()) {
				nameFound = true;
			}

			if (nameFound) {
				_floatingSearchResult.push_back(_scheduledList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY));
		cout << "Floating Entries containing " << inputName << " in their name:" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		if (_floatingSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadFloatingSearchResult();
		}
}

	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp
	 */

void SearchEntries::searchLocation(string inputLocation) {
	initialiseSearchPagingAttributes();
		//initialise search results
		for (unsigned int i = 0; i < _scheduledList.size(); i++) {
			bool locationFound = false;
			_scheduledList[i].insertEntryNumber(i+1);
			string entryLocation = _scheduledList[i].getLocation();
			string::const_iterator it = caseInsFind(entryLocation, inputLocation);
			if (it != entryLocation.end()) {
				locationFound = true;
			}
			if (locationFound) {
				_scheduledSearchResult.push_back(_scheduledList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY));
		cout << "Scheduled Entries containing " << inputLocation << " in their location:" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		if (_scheduledSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_BLUE | FOREGROUND_RED | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
		loadScheduledSearchResult();
		}

		//initialise floating search result
		for (unsigned int i = 0; i < _floatingList.size(); i++) {
			bool locationFound = false;
			_floatingList[i].insertEntryNumber(i + 1);
			string entryLocation = _floatingList[i].getLocation();
			string::const_iterator it = caseInsFind(entryLocation, inputLocation);
			if (it != entryLocation.end()) {
				locationFound = true;
			}
			if (locationFound) {
				_floatingSearchResult.push_back(_floatingList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY));
		cout << "Floating Entries containing " << inputLocation << " in their location:" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		if (_floatingSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_BLUE | FOREGROUND_RED | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadFloatingSearchResult();
		}
}

void SearchEntries::searchStatus(string inputStatus) {
	initialiseSearchPagingAttributes();
		//initialise search results
		for (unsigned int i = 0; i < _scheduledList.size(); i++) {
			bool statusMatches = false;
			_scheduledList[i].insertEntryNumber(i+1);
			if (inputStatus == _scheduledList[i].getStatus()) {
				statusMatches = true;
				_scheduledSearchResult.push_back(_scheduledList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY));
		cout << "Scheduled Entries that is/are " << inputStatus << ":" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		if (_scheduledSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadScheduledSearchResult();
		}

		//Floating Search Result
		for (unsigned int i = 0; i < _floatingList.size(); i++) {
			bool statusMatches = false;
			_floatingList[i].insertEntryNumber(i+1);
			if (inputStatus == _floatingList[i].getStatus()) {
				statusMatches = true;
				_floatingSearchResult.push_back(_floatingList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY));
		cout << "Floating Entries that is/are " << inputStatus << ":" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));

		if (_floatingSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadFloatingSearchResult();
		}
}

	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp
	 */

void SearchEntries::searchAll(string userInput) {
	initialiseSearchPagingAttributes();
	for (unsigned int i = 0; i < _scheduledList.size(); i++) {
			_scheduledList[i].insertEntryNumber(i + 1);
			bool allFound = false;
			_scheduledList[i].insertEntryNumber(i+1);
			string entryName = _scheduledList[i].getName();
			string::const_iterator it = caseInsFind(entryName, userInput);
			if (it != entryName.end()) {
				allFound = true;
			}

			string entryLocation = _scheduledList[i].getLocation();
			it = caseInsFind(entryLocation, userInput);
			if (it != entryLocation.end()) {
				allFound = true;
			}

			string entryTag = _scheduledList[i].getTags();
			it = caseInsFind(entryTag, userInput);
			if (it != entryTag.end()) {
				allFound = true;
			}

			if (allFound) {
				_scheduledSearchResult.push_back(_scheduledList[i]);
			}
	}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY));
		cout << "Scheduled Entries with keyword " << userInput << ":" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		
		if (_scheduledSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_BLUE | FOREGROUND_RED | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadScheduledSearchResult();
		}
		
		//floating Entries
		for (unsigned int i = 0; i < _floatingList.size(); i++) {
			_floatingList[i].insertEntryNumber(i + 1);
			bool allFound = false;
			_floatingList[i].insertEntryNumber(i + 1);
			string entryName = _floatingList[i].getName();
			string::const_iterator it = caseInsFind(entryName, userInput);
			if (it != entryName.end()) {
				allFound = true;
			}

			string entryLocation = _floatingList[i].getLocation();
			it = caseInsFind(entryLocation, userInput);
			if (it != entryLocation.end()) {
				allFound = true;
			}

			string entryTag = _floatingList[i].getTags();
			it = caseInsFind(entryTag, userInput);
			if (it != entryTag.end()) {
				allFound = true;
			}
			if (allFound) {
				_floatingSearchResult.push_back(_floatingList[i]);
			}
		}

		SetConsoleTextAttribute(hConsole, (FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY));
		cout << "Floating Entries with keyword " << userInput << ":" << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));

		if (_floatingSearchResult.empty()) {
			SetConsoleTextAttribute(hConsole, (FOREGROUND_BLUE | FOREGROUND_RED | FOREGROUND_INTENSITY));
			cout << "Entries are not found" << endl << endl;
			SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		} else {
			loadFloatingSearchResult();
		}
}

	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\SearchEntries.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\TextUI.cpp
	 */

void TextUI::displayResizeOptions() {
	int resizeChoice;
	string resizeChoiceInput;
	HWND hWnd=GetConsoleWindow();
	cout << CHOOSE_RESIZE_OPTIONS << endl;
	cout << SIZE_SMALL << endl;
	cout << SIZE_LARGE << endl;
	cout << SIZE_DEFAULT << endl;
	cout << BORDER << endl;
	cout << YOUR_CHOICE;
	getline(cin, resizeChoiceInput);
	cout << BORDER << endl << endl;
	istringstream convertResizeChoice(resizeChoiceInput);
	if (!(convertResizeChoice >> resizeChoice)) {
		resizeChoice = 0;  
	}

	switch (resizeChoice){
	case 0:
		break;

	case 1:
		MoveWindow(hWnd,400,0,520,400, TRUE);
		break;

	case 2:
		MoveWindow(hWnd,300,0,1020,720, TRUE);
		break;

	case 3:
		MoveWindow(hWnd,400,0,520,730, TRUE);
		break;

	default:
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_INTENSITY));
		cout << WRONG_INPUT << endl;
		SetConsoleTextAttribute(hConsole, (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN));
		break;
	}
}



	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\TextUI.cpp





	/**
	 * origin: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\TextUI.h
	 */

		void displayResizeOptions();
	// End of segment: M:\NUS\Semester 4 - 2015\CS2103\Project files\Repository\TextUI.h





